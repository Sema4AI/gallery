{"metadata": {"name": "Excel", "description": "Create, read and update sheets on local Excel files.", "secrets": {}, "action_package_version": "4.0.6", "metadata_version": 4}, "openapi.json": {"openapi": "3.1.0", "info": {"title": "Sema4.ai Action Server", "version": "2.6.0"}, "servers": [{"url": "http://localhost:8080"}], "paths": {"/api/actions/excel/excel-download-file/run": {"post": {"summary": "Excel Download File", "description": "Download chat file to a local directory.", "operationId": "excel_download_file", "requestBody": {"content": {"application/json": {"schema": {"properties": {"filename": {"type": "string", "title": "Filename", "description": "The name of the file to get"}, "target_directory": {"type": "string", "title": "Target Directory", "description": "The directory to save the file to"}}, "type": "object", "required": ["filename", "target_directory"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "string", "title": "Response for Excel Download File", "description": "The absolute path of the file if successful, otherwise an error is raised."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": false, "x-operation-kind": "action"}}, "/api/actions/excel/create-workbook/run": {"post": {"summary": "Create Workbook", "description": "Create a new local Excel file defined as workbook.\nThis will overwrite an already existing file and will try to guess the extension\n(xls or xlsx) if is not specified. It also creates a sheet with a default name\nwhich can be customized by providing an explicit `sheet_name`.", "operationId": "create_workbook", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the initial sheet in the workbook. Leave it blank for\nrelying on the default name (\"Sheet\").", "default": ""}}, "type": "object", "required": ["file_path"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Create Workbook", "description": "The absolute path of the newly created local Excel file."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": true, "x-operation-kind": "action"}}, "/api/actions/excel/delete-workbook/run": {"post": {"summary": "Delete Workbook", "description": "Delete an existing local Excel file defined as workbook.\nWill return an error message if the passed file is not found.", "operationId": "delete_workbook", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}}, "type": "object", "required": ["file_path"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Delete Workbook", "description": "The absolute path of the removed local Excel file."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": true, "x-operation-kind": "action"}}, "/api/actions/excel/create-worksheet/run": {"post": {"summary": "Create Worksheet", "description": "Create a new sheet in an already existing workbook.\nWill return an error message if the sheet already exists.", "operationId": "create_worksheet", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the new sheet to be added in the workbook."}}, "type": "object", "required": ["file_path", "sheet_name"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Create Worksheet", "description": "The name of the newly created worksheet."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": true, "x-operation-kind": "action"}}, "/api/actions/excel/delete-worksheet/run": {"post": {"summary": "Delete Worksheet", "description": "Remove a sheet from an already existing workbook.\nWill return an error message if the sheet is not present.", "operationId": "delete_worksheet", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the sheet you want removed from the workbook."}}, "type": "object", "required": ["file_path", "sheet_name"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Delete Worksheet", "description": "The name of the just removed worksheet."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": true, "x-operation-kind": "action"}}, "/api/actions/excel/add-rows/run": {"post": {"summary": "Add Rows", "description": "Add rows in an already existing worksheet of a workbook.\nThis will append the rows at the next empty index available. Only use this method on an empty file or\nwhen you want to add data to the end of the file. If you want to add a new column or manipulate data\nuse `update_sheet_rows` instead.", "operationId": "add_rows", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the sheet you want to store the rows into."}, "data_table": {"properties": {"rows": {"items": {"properties": {"cells": {"items": {"type": "string"}, "type": "array", "title": "Cells", "description": "Row cells"}}, "type": "object", "required": ["cells"], "title": "Row"}, "type": "array", "title": "Rows", "description": "The rows that need to be added"}}, "type": "object", "required": ["rows"], "title": "Data Table", "description": "A 2D matrix containing the sheet cell values."}}, "type": "object", "required": ["file_path", "sheet_name", "data_table"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Add Rows", "description": "How many rows were added in the sheet."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": true, "x-operation-kind": "action"}}, "/api/actions/excel/update-sheet-rows/run": {"post": {"summary": "Update Sheet Rows", "description": "Update a cell or a range of cells in a worksheet using A1 notation.", "operationId": "update_sheet_rows", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the sheet you want to store the rows into."}, "start_cell": {"type": "string", "title": "Start Cell", "description": "The cell from where to start the update. The end will be determined based on each row's length."}, "data": {"properties": {"rows": {"items": {"properties": {"cells": {"items": {"type": "string"}, "type": "array", "title": "Cells", "description": "Row cells"}}, "type": "object", "required": ["cells"], "title": "Row"}, "type": "array", "title": "Rows", "description": "The rows that need to be added"}}, "type": "object", "required": ["rows"], "title": "Data", "description": "Data to be inserted into the cell or cells."}, "overwrite": {"type": "boolean", "title": "Overwrite", "description": "If True, the data will overwrite the existing data in the cells.", "default": false}}, "type": "object", "required": ["file_path", "sheet_name", "start_cell", "data"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Update Sheet Rows", "description": "Message indicating the success or failure of the operation."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": true, "x-operation-kind": "action"}}, "/api/actions/excel/get-cell/run": {"post": {"summary": "Get Cell", "description": "Retrieve the value of a cell from an already existing worksheet of a workbook.\nThis action works similarly to `set_cell`, but instead of setting a value it\nactually returns the value found at the given position in the sheet.", "operationId": "get_cell", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the sheet you want to store the rows into."}, "row": {"type": "string", "title": "Row", "description": "The row number starting with 1."}, "column": {"type": "string", "title": "Column", "description": "The column letter or index."}}, "type": "object", "required": ["file_path", "sheet_name", "row", "column"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result", "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Get Cell", "description": "The value found at the given `row` and `column`."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": false, "x-operation-kind": "action"}}, "/api/actions/excel/get-sheet-content/run": {"post": {"summary": "Get Sheet Content", "description": "Retrieve the whole content of an already existing worksheet of a workbook.\nThis action retrieves all the cells found in the sheet and returns them in a table\nstructure.", "operationId": "get_sheet_content", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "The name of the sheet you want to store the rows into."}}, "type": "object", "required": ["file_path", "sheet_name"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"properties": {"rows": {"items": {"properties": {"cells": {"items": {"type": "string"}, "type": "array", "title": "Cells", "description": "Row cells"}}, "type": "object", "required": ["cells"], "title": "Row"}, "type": "array", "title": "Rows", "description": "The rows that need to be added"}}, "type": "object", "required": ["rows"], "title": "Table"}, {"type": "null"}], "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Get Sheet Content", "description": "A table structure capturing the entire content from the requested sheet."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": false, "x-operation-kind": "action"}}, "/api/actions/excel/get-workbook-schema/run": {"post": {"summary": "Get Workbook Schema", "description": "Retrieve the workbook overview defined as schema.\nThis action identifies the sheets found in the given workbook and for each one of\nthem it presents the first non-empty row which usually represents the header of the sheet.", "operationId": "get_workbook_schema", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "The file name or a local path pointing to the workbook file."}}, "type": "object", "required": ["file_path"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"properties": {"created": {"properties": {"user": {"type": "string", "title": "User", "description": "User name"}, "time": {"type": "string", "format": "date-time", "title": "Time", "description": "Creation time"}}, "type": "object", "required": ["user", "time"], "title": "UserAndTime"}, "last_modified": {"properties": {"user": {"type": "string", "title": "User", "description": "User name"}, "time": {"type": "string", "format": "date-time", "title": "Time", "description": "Creation time"}}, "type": "object", "required": ["user", "time"], "title": "UserAndTime"}, "sheets": {"items": {"properties": {"name": {"type": "string", "title": "Name", "description": "Sheet name"}, "data_range": {"type": "string", "title": "Data Range", "description": "Data range"}}, "type": "object", "required": ["name", "data_range"], "title": "Sheet"}, "type": "array", "title": "Sheets", "description": "Workbook sheets"}}, "type": "object", "required": ["created", "last_modified", "sheets"], "title": "Schema"}, {"type": "null"}], "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Get Workbook Schema", "description": "A list of sheets where for every sheet its name and first non-empty row are given."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": false, "x-operation-kind": "action"}}, "/api/actions/excel/find-cross-reference/run": {"post": {"summary": "Find Cross Reference", "description": "Find the cell references where header1 and header2 intersect in the same row.", "operationId": "find_cross_reference", "requestBody": {"content": {"application/json": {"schema": {"properties": {"file_path": {"type": "string", "title": "File Path", "description": "Path to the Excel file"}, "sheet_name": {"type": "string", "title": "Sheet Name", "description": "Name of the sheet to search"}, "header1": {"properties": {"value": {"anyOf": [{"type": "string"}, {"items": {}, "type": "array"}], "title": "Value"}}, "type": "object", "required": ["value"], "title": "Header1", "description": "First header value(s) to find (can be a string or list of strings)"}, "header2": {"properties": {"value": {"anyOf": [{"type": "string"}, {"items": {}, "type": "array"}], "title": "Value"}}, "type": "object", "required": ["value"], "title": "Header2", "description": "Second header value(s) to find (can be a string or list of strings)"}}, "type": "object", "required": ["file_path", "sheet_name", "header1", "header2"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"properties": {"intersections": {"items": {"type": "string"}, "type": "array", "title": "Intersections"}}, "type": "object", "required": ["intersections"], "title": "CrossReferenceResult", "description": "Model for the result of cross-reference intersections"}, {"type": "null"}], "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Find Cross Reference", "description": "List of dictionaries containing the intersection descriptions and cell references"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-operation-kind": "action"}}}, "components": {"schemas": {"HTTPValidationError": {"properties": {"errors": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Errors"}}, "type": "object", "title": "HTTPValidationError"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}}}