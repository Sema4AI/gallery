name: AI Actions tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  run-command:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest, ubuntu-latest]
    timeout-minutes: 60  # timeouts after 1h

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build package metadata on *nix OS
        if: runner.os != 'Windows'
        run: |
          echo "Downloading latest Action Server..."
          system=$(uname -s)
          case ${system} in
              Darwin*)    url=https://cdn.sema4.ai/action-server/releases/latest/macos64/action-server;;
              Linux*)     url=https://cdn.sema4.ai/action-server/releases/latest/linux64/action-server;;
              *)           echo "Invalid platform '$system' detected!"; exit 1;
          esac
          curl -L -o /usr/local/bin/action-server $url
          chmod +x /usr/local/bin/action-server
          echo "Action Server version: $(action-server version)"

          echo "Building metadata for every Action Package..."
          failed=0
          for dir in $(find actions -type d -maxdepth 1); do
            if [ ! -f "$dir/package.yaml" ]; then
              continue
            fi
            echo "Building metadata over Action Package: $dir"
            (pushd $dir && action-server package metadata && popd) &  # runs in parallel
          done

          wait
          for job in $(jobs -p); do
            wait $job || let "failed+=1"
          done
          if [ "$failed" -ne 0 ]; then
            echo "$failed builds failed!"
            exit 1
          fi
        shell: bash

      # - name: Build package metadata on Windows OS
      #   if: runner.os == 'Windows'
      #   run: |
      #     Get-ChildItem -Directory | ForEach-Object {
      #       Write-Output "Running command in $($_.FullName)"
      #       Set-Location -Path $_.FullName
      #       your-command-here
      #       Set-Location -Path $Env:GITHUB_WORKSPACE
      #     }
      #   shell: pwsh
