{"metadata": {"name": "PDF", "description": "Reading and finding text- and image-based PDFs.", "secrets": {}, "version": 1}, "openapi.json": {"openapi": "3.1.0", "info": {"title": "Sema4.ai Action Server", "version": "0.11.0"}, "servers": [{"url": "http://localhost:8080"}], "paths": {"/api/actions/pdf/read-text-from-pdf/run": {"post": {"summary": "Read Text From Pdf", "description": "Returns text from a PDF file.\nCan be used to extract text from a PDF file and then\nsummarize the text, extract keywords, or perform any other\nNLP tasks.", "operationId": "read_text_from_pdf", "requestBody": {"content": {"application/json": {"schema": {"properties": {"filename": {"type": "string", "title": "Filename", "description": "The name of the file to read."}}, "type": "object", "required": ["filename"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"properties": {"pages": {"type": "integer", "title": "Pages", "description": "The number of pages in the PDF", "default": 0}, "length": {"type": "integer", "title": "Length", "description": "The number of characters in the PDF", "default": 0}, "content": {"type": "object", "title": "Content", "description": "The content of the PDF", "default": {}}}, "type": "object", "title": "PDFContent"}, {"type": "null"}], "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Read Text From Pdf", "description": "Text content of the file per page."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": false}}, "/api/actions/pdf/find-text-in-pdf/run": {"post": {"summary": "Find Text In Pdf", "description": "Returns the pages where the text was found in the PDF.\nReport to user paragraphs where the text was found in the PDF.", "operationId": "find_text_in_pdf", "requestBody": {"content": {"application/json": {"schema": {"properties": {"text_to_find": {"type": "string", "title": "Text To Find", "description": "The text to find in the PDF."}, "filename": {"type": "string", "title": "Filename", "description": "The name of the file to read."}, "case_sensitive": {"type": "boolean", "title": "Case Sensitive", "description": "Whether the search should be case sensitive (default False)", "default": false}}, "type": "object", "required": ["text_to_find", "filename"]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"properties": {"result": {"anyOf": [{"properties": {"items": {"items": {"type": "object"}, "type": "array", "title": "Items", "description": "The matches found", "default": []}}, "type": "object", "title": "Matches"}, {"type": "null"}], "description": "The result for the action if it ran successfully"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "The error message if the action failed for some reason"}}, "type": "object", "title": "Response for Find Text In Pdf", "description": "Matches found in the PDF."}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-openai-isConsequential": false}}}, "components": {"schemas": {"HTTPValidationError": {"properties": {"errors": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Errors"}}, "type": "object", "title": "HTTPValidationError"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}}}
